#!/usr/bin/env ruby

require 'nokogiri'
require 'optparse'

FACTIONS = ['Forest', 'Shadow', 'Fortress', 'Abyss', 'Light', 'Dark']
CLASSES = ['Warrior', 'Mage', 'Assassin', 'Ranger', 'Priest']

$heroes = {}
$hero_count = 0
$sources = {}

def titleize_hero(name)
  return name.gsub(/\s/, '_')
end

def parse_acquired_through(str, hero_name)
  return [] if str.empty?
  # Wikia fixups:
  str.gsub!(/\s+/, ' ')
  if m = str.match(/^(.*\w\w)(\d+\s+Star\s+.*)$/)
    str = m.captures[0] + ',' + m.captures[1]
  elsif m = str.match(/^(.*\w\w)(Prophet\s+Tree.*)$/)
    str = m.captures[0] + ',' + m.captures[1]
  end
  if str.sub!(/Shardv/, 'Shard')
    $stderr.puts "WARN: Acquired through: fixed typo 'Shardv' on hero #{hero_name}"
  end
  if str.match(%r{^.*\([^),]*$})
    str += ')'
    $stderr.puts "WARN: Acquired through: added missing close paren on hero #{hero_name}"
  end
  str.gsub!(/Creation circle/, 'Creation Circle')
  # then just split it
  str.split(/,/).collect do |source|
    source.strip
  end
end

def parse_fuses_into(str, hero_name)
  return [] if str.match(/nothing/i)
  str.split(/,/).collect do |forged|
    if m = forged.match(%r{^(\d+)\u2605\s*(.*)$})
      stars, name = m.captures
      name.strip!
      {'stars' => stars.to_i, 'name' => name}
    else
      $stderr.puts "WARN: hero #{hero_name}: ignoring fuses_into=[#{forged}]"
      {}
    end
  end
end

def parse_fused_from(str, hero_name)
  return [] if str.match(/can't/i)
  if m = str.match(/^(.*\w\w)(\d+x\s+\d+.*)$/)
    str = m.captures[0] + ',' + m.captures[1]
  end
  str.split(/,/).collect do |fodder|
    if m = fodder.match(%r{^(\d+)x\s+(\d+)\u2605\s*(.*)$})
      count, stars, name = m.captures
      name.strip!
      if m = name.match(%r{^(.*)\s+hero$})
        faction = m.captures[0].strip
        if FACTIONS.include?(faction)
          {'count' => count.to_i, 'stars' => stars.to_i, 'faction' => faction}
        elsif faction == 'Any faction'
          {'count' => count.to_i, 'stars' => stars.to_i}
        else
          $stderr.puts "WARN: hero #{hero_name}: ignoring unknown faction fused_from=[#{fodder}]"
          {}
        end
      else
        {'count' => count.to_i, 'stars' => stars.to_i, 'name' => name}
      end
    elsif m = fodder.match(%r{^(\d+)x\s+(\S+)\s+hero$})
      count, faction = m.captures
      if FACTIONS.include?(faction)
        {'count' => count.to_i, 'faction' => faction}
      elsif faction == 'Any'
        {'count' => count.to_i}
      else
        $stderr.puts "WARN: hero #{hero_name}: ignoring unknown bare faction fused_from=[#{fodder}]"
        {}
      end
    else
      $stderr.puts "WARN: hero #{hero_name}: ignoring fused_from=[#{fodder}]"
      {}
    end
  end
end

def parse_a_section(section, hero_name)
  sect_attr = {}
  # Hero stars
  stars = nil
  section.css('h2').each do |label_h|
    label = label_h.content.strip
    next unless m = label.match(/^(\d+).*stats/i)
    sect_attr['stars'] = m.captures[0].to_i
  end
  if !sect_attr['stars']
    $stderr.puts "SKIP: hero #{hero_name} no star sections"
    return {}
  end
  # Hero image
  section.css('figure img').each do |img|
    sect_attr['img_src'] = img['src']
    if m = sect_attr['img_src'].match(%r</([^/]+icon\.[a-z]{3,4})/>i)
      sect_attr['img'] = m.captures[0].sub(/%[0-9a-f]{2}/i, '')
    else
      $stderr.puts "SKIP: hero #{hero_name} #{sect_attr['stars']}-star bad image base"
      return {}
    end
  end
  if !sect_attr['img_src']
    $stderr.puts "WARN: hero #{hero_name} #{sect_attr['stars']}-star no image"
  end
  # Hero stats
  section.css('div.pi-item').each do |div|
    div.css('h3.pi-data-label').each do |label_h|
      label_type = label_h.content.strip.downcase
      if label_type == 'fused from'
        div.css('div.pi-data-value').each do |value_div|
          fused_from = parse_fused_from(value_div.content.to_s, hero_name)
          sect_attr['fused_from'] = fused_from unless fused_from.empty?
        end
      elsif label_type == 'fuses into'
        div.css('div.pi-data-value').each do |value_div|
          fuses_into = parse_fuses_into(value_div.content.to_s, hero_name)
          sect_attr['fuses_into'] = fuses_into unless fuses_into.empty?
        end
      elsif label_type == 'acquired through'
        div.css('div.pi-data-value').each do |value_div|
          acq_thru = parse_acquired_through(value_div.content.to_s, hero_name)
          acq_thru.each do |source|
            $sources[source] = true
          end
          sect_attr['sources'] = acq_thru unless acq_thru.empty?
        end
      elsif ['power', 'health', 'attack', 'armor', 'speed'].include?(label_type)
        div.css('div.pi-data-value').each do |value_div|
          value = value_div.content.strip.to_i
          if value <= 0
            $stderr.puts "WARN: hero #{attr['name']}: invalid #{label_type}"
          elsif
            sect_attr[label_type] = value.to_i
          end
        end
      else
        $stderr.puts "WARN: unknown label_type=[#{label_type}]"
      end
    end
  end
  sect_attr
end

def parse_an_article(art, page_tag)
  attr = {}
  # Hero name
  art.css('h2.pi-title').each do |h2|
    name = h2.content.strip
    name.sub!(/Eyed$/, 'eyed')  # EXCEPTION
    if titleize_hero(name) != page_tag
      $stderr.puts "SKIP: hero name #{name} <=> page title #{page_tag}"
      return {}
    else
      attr['name'] = name
    end
  end
  # Hero faction and role (class)
  art.css('div.pi-item').each do |div|
    div.css('h3.pi-data-label').each do |label_h|
      label_type = label_h.content.strip.downcase
      if ['faction', 'role'].include?(label_type)
        div.css('div.pi-data-value').each do |value_div|
          value_div.css('a').each do |a|
            value = a.content.strip
            break if !value.empty?
          end
          value ||= value_div.content.strip
          list = (label_type == 'faction') ? FACTIONS : CLASSES
          if !list.include?(value)
            $stderr.puts "SKIP: hero #{attr['name']}: unknown #{label_type} #{value}"
            return {}
          else
            attr[label_type] = value
          end
        end
      end
    end
  end
  # Hero star levels
  stars_attr = art.css('section.pi-item.pi-group').collect do |section|
    parse_a_section(section, attr['name'])
  end
  unless stars_attr.empty?
    attr['stars'] = stars_attr
    $hero_count += attr['stars'].select {|s| s['stars'] < 10 }.count
  end
  attr
end

def store_a_hero(attr)
  if !attr['name'] || !attr['faction'] || !attr['role']
    $stderr.puts "SKIP: missing attributes #{attr.inspect}"
    return
  elsif !attr['stars'] || attr['stars'].empty?
    $stderr.puts "SKIP: missing star levels #{attr.inspect}"
    return
  end
  puts attr.inspect if $options[:verbose]
  # TODO store to DB (unless :dryrun)
  $heroes[attr['name']] = attr
end

def parse_a_page(path, page_tag)
  page = Nokogiri::HTML(open(File.join(path, page_tag)))
  if art = page.css('.WikiaArticle')[0]
    attr = parse_an_article(art, page_tag)
    if !attr.empty?
      store_a_hero(attr)
    end
  else
    $stderr.puts "SKIP: no WikiaArticle found in #{page_tag}"
  end
end

def emit_images
  $heroes.each do |hero_name, hero|
    hero['stars'].each do |star|
      puts "wget -O app/assets/images/heroes/#{star['img']} '#{star['img_src']}'" if star['img_src']
    end
  end
end

def emit_sources
  $sources.keys.sort.each do |source|
    puts "source: #{source}"
  end
end

$options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: parse_wiki [$options]"
  opts.on("-i", "--images", "Dump image URLs") do |i|
    $options[:images] = i
  end
  opts.on("-n", "--[no-]dry-run", "Dry run (don't update DB)") do |d|
    $options[:dryrun] = d
  end
  opts.on("-s", "--sources", "Dump list of sources") do |s|
    $options[:sources] = s
  end
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    $options[:verbose] = v
  end
  opts.on("-w", "--wiki PATH", "Path to Wikia mirror") do |w|
    $options[:wiki_path] = w
  end
  opts.on_tail("-h", "--help", "Display command-line options") do
    puts opts
    exit
  end
end.parse!
unless $options[:wiki_path]
  abort('-w/--wiki is required')
end

path = File.join($options[:wiki_path], 'wiki')
$stderr.puts "path=#{path}" if $options[:verbose]
Dir.entries(path).each do |filename|
  next if filename =~ /^\.+$/
  #next unless filename =~ /^[AB]/  # for short debug runs
  $stderr.puts "file=#{filename}" if $options[:verbose]
  begin
    # catch Errno::ENOENT from this function:
    parse_a_page(path, filename)
  rescue Errno::ENOENT => e
    $stderr.puts "SKIP: file not found, path=#{path} filename=#{filename}"
  end
end
emit_images if $options[:images]
emit_sources if $options[:sources]
$stderr.puts "total of #{$hero_count} heroes (excluding 10*)" if $options[:verbose]
