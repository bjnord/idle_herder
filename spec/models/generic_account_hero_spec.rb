require 'rails_helper'

RSpec.describe GenericAccountHero, type: :model do
  subject { build(:generic_account_hero) }
  it "should be valid" do
    expect(subject).to be_valid
  end
  it "should be sharded" do
    expect(subject.sharded?).to be_truthy
  end
  it "should not be understarred" do
    expect(subject.understarred?).to be_falsey
  end
  it "should not be wish_list" do
    expect(subject.wish_list?).to be_falsey
  end
  it "should be fodder" do
    expect(subject.fodder?).to be_truthy
  end

  context "with level" do
    let(:account_hero) { build(:generic_account_hero, level: 12) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:level, :invalid_for_this_hero)).to be_truthy
    end
  end

  context "without g_stars" do
    let(:account_hero) { build(:generic_account_hero, g_stars: nil) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:g_stars, :blank)).to be_truthy
    end
  end

  context "with g_stars too low" do
    let(:account_hero) { build(:generic_account_hero, g_stars: 2) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:g_stars, :greater_than_or_equal_to, count: 3)).to be_truthy
    end
  end

  context "with g_stars too high" do
    let(:account_hero) { build(:generic_account_hero, g_stars: 6) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:g_stars, :less_than_or_equal_to, count: 5)).to be_truthy
    end
  end

  context "with g_stars=4" do
    let(:account_hero) { build(:generic_account_hero, g_stars: 4) }

    it "should provide stars" do
      expect(account_hero.stars).to be == 4
    end
  end

  context "without g_faction" do
    let(:account_hero) { build(:generic_account_hero, g_faction: nil) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:g_faction, :blank)).to be_truthy
    end
  end

  context "with invalid g_faction" do
    let(:account_hero) { build(:generic_account_hero, g_faction: 12) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:g_faction, :less_than, count: Hero::FACTIONS.count)).to be_truthy
    end
  end

  context "with g_faction=Abyss" do
    let(:account_hero) { build(:generic_account_hero, g_faction: 2) }

    it "should provide faction" do
      expect(account_hero.faction).to be == 2
    end
    it "should have an autogenerated 'Abyss hero' name" do
      expect(account_hero.name).to be == "#{Hero::faction_name_of(2)} hero"
    end
  end

  context "without shards" do
    let(:account_hero) { build(:generic_account_hero, shards: nil) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:shards, :greater_than, count: 0)).to be_truthy
    end
  end

  context "with invalid shards" do
    let(:account_hero) { build(:generic_account_hero, shards: -1) }

    it "should not be valid" do
      expect(account_hero).not_to be_valid
      expect(account_hero.errors.added?(:shards, :greater_than, count: 0)).to be_truthy
    end
  end

  context "without is_fodder" do
    let(:account_hero) { build(:generic_account_hero, is_fodder: nil) }

    it "should be valid, and override is_fodder" do
      expect(account_hero).to be_valid
      expect(account_hero.is_fodder).to be_truthy
    end
  end

  context "without target_stars" do
    let(:account_hero) { build(:generic_account_hero, target_stars: nil) }

    it "should be valid, and override target_stars" do
      expect(account_hero).to be_valid
      expect(account_hero.target_stars).to be == account_hero.stars
    end
  end
end
